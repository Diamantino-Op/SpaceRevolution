plugins {
    id 'fabric-loom' version '1.1.8'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation("curse.maven:techreborn-233564:4142163")
    modImplementation("curse.maven:reborncore-237903:4142164")

    modApi("com.teamresourceful.resourcefullib:resourcefullib-fabric-${project.minecraft_version}:${project.resourcefullib_version}")
    modApi("com.teamresourceful.resourcefulconfig:resourcefulconfig-fabric-${project.minecraft_version}:${project.resourcefulconfig_version}")
    modApi("com.teamresourceful:yabn:${project.yabn_version}")

    include modApi("teamreborn:energy:${project.energy_api_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

sourceSets {
    main{
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

loom {
    runs {
        datagen {
            server()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}
assemble.dependsOn runDatagen

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.archives_base_name

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
